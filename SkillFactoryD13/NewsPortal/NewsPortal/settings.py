"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os, sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

BOOTSTRAP5_FOLDER = os.path.abspath(os.path.join(BASE_DIR, "..", "bootstrap5"))
if BOOTSTRAP5_FOLDER not in sys.path:
    sys.path.insert(0, BOOTSTRAP5_FOLDER)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dktg+sc3wrwc)qf(%x(2v22_uf3zdp5pv2s2v+@1dwra#u1wy#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'bootstrap5',
    # 'news',
    'news.apps.NewsConfig',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',
    'django_apscheduler',

]

DEFAULT_FROM_EMAIL = 'test@shirshakov.ru'
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

]
SITE_ID = 1

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        # 'DIRS': [os.path.join(BASE_DIR, '../news/templates')],
        'DIRS': [os.path.join(BASE_DIR, '../NewsPortal/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# LOGIN_URL = 'sign/login/'
LOGIN_URL = '/accounts/login/'

LOGIN_REDIRECT_URL = '/'

WSGI_APPLICATION = 'NewsPortal.wsgi.application'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

EMAIL_HOST = 'mail.nic.ru'  # адрес сервера почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = ''  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = ''  # пароль от почты
EMAIL_USE_SSL = True  # использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно

# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
        # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'loggers': {
        'django': {
            'handlers': ['hand_debug_cons', 'hand_info_file', 'hand_warning_cons', 'hand_error_cons'],
            'level': 'DEBUG',
        },
        'table': {
            'level': 'DEBUG',
            'handlers': ['hand_debug_cons', 'hand_info_file', 'hand_warning_cons', 'hand_error_cons'],
        },
        'django.request': {
            'handlers': ['hand_error_file', 'mail_admins'],
            'propagate': True,
        },
        'django.server': {
            'handlers': ['hand_error_file', 'mail_admins'],
            'propagate': True,
        },
        'django.template': {
            'handlers': ['hand_error_file'],
            'propagate': True,
        },
        'django.db_backends': {
            'handlers': ['hand_error_file'],
            'propagate': True,
        },
        'django.security': {
            'handlers': ['hand_security_file'],
            'propagate': True,
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'hand_debug_cons': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'format_debug',
            'filters': ['require_debug_true'],
        },
        'hand_info_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'format_info',
            'filename': 'logs/general.log',
            'filters': ['require_debug_false'],

        },
        'hand_warning_cons': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'format_warning',
            'filters': ['require_debug_true'],
        },
        'hand_error_cons': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'format_error',
            'filters': ['require_debug_true'],
        },
        'hand_error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'format_error',
            'filename': 'logs/errors.log',
        },
        'hand_security_file': {
            'class': 'logging.FileHandler',
            'filename': 'logs/security.log',
            'formatter': 'format_info',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'format_error',
            'filters': ['require_debug_false'],
        }

    },
    'formatters': {
        'format_debug': {
            'format': '%(asctime)s %(levelname)s %(message)s',
        },
        'format_warning': {
            'format': '%(pathname)s %(asctime)s %(levelname)s %(message)s',
        },
        'format_error': {
            'format': '%(pathname)s %(asctime)s %(levelname)s %(message)s %(exc_info)s',
        },
        'format_info': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
        },
    },

}
